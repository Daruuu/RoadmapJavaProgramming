Realiza el diseño (aplicando análisis top-down) e implementación de los siguientes problemas.
Define tantos métodos como creas necesario en cada ejercicio.


1) Haga un programa llamado OrdenarPerZeros que, dado un array de números enteros inicializado
con valores concretos, primero lo muestre por pantalla y después el muestre ordenado de forma
ascendente de acuerdo al número de 0 de cada valor.
Declare el array como variable dentro del método principal.
A modo de ejemplo, el comportamiento del programa podría ser el siguiente:
[ 100 2014 12 30 302 40020 7009 500000 ]
[ 500000 40020 7009 100 2014 30 302 12 ]


2) Haga un programa llamado MasVocals que lea una frase y, a continuación,
muestre por pantalla cuál es la palabra con más vocales (sin importar mayúsculas y minúsculas).
A modo de ejemplo, el comportamiento del programa podría ser el siguiente:
Escribe una frase:
Érase una vez una chica llamada Caperucita Roja
La palabra con más vocales es "llamada".


3) Haz el diseño modular y su posterior implementación en Java de un programa que lleve la
contabilidad de una empresa.
El objetivo es controlar los ingresos y gastos habidos durante un período de tiempo.
El programa tiene un menú con las siguientes opciones:
1. Alta de ingreso
2. Alta de gasto
3. Muestra resumen
4. Histórico ingresos
5. Histórico gastos
6. Fin

La opción 'Alta de ingreso': el usuario introduzca una nueva partida para el ingreso.
La opción 'Alta de gasto': el usuario introduzca una nueva partida para el gasto.
La opción 'Mostra resum': nos muestra un informe donde aparece el total de ingresos y el total de gastos.
Además, en caso de que haya más ingresos que gastos nos mostrará también la siguiente frase:

"La empresa ha tenido unos beneficios de X euros",
donde X es la diferencia entre ingresos y gastos.

En caso de que los gastos sean mayores que los ingresos, la frase a mostrar es:
"La empresa ha tenido un déficit de X euros", donde X es la diferencia entre los gastos y los ingresos.

Las opciones histórico ingresos y gastos mostrarán un listado de los ingresos y gastos realizados respectivamente,
así como la fecha exacta de su realización.
La opción 'fin' hace que termine el programa.
Usar arrays para almacenar los ingresos y gastos, así como las fechas.
Usar la clase LocalDateTime para representar las fechas.

4) En Estados Unidos es muy popular un juego de dados con apuestas:
un jugador tira simultáneamente dos dados y suma la puntuación obtenida entre ellos,
el valor resultante de la suma será la puntuación obtenida en el lanzamiento.
Reglas del juego.
La puntuación obtenida en el primer lanzamiento se llama punto, que se memoriza.
Si el punto es 7 o 11 se gana y termina la partida.
Si el punto es 2, 3 o 12 se pierde y se termina la partida.
Por los demás valores del punto se sigue lanzando los dados hasta que se saca de nuevo el punto obtenido en el primer lanzamiento,
  entonces se gana y se termina la partida, o se quita un 7, entonces se pierde y se termina la partida.
Ejemplos de partidas:

7 (es el punto) Se gana
11 (es el punto) Se gana
2 (es el punto) Se pierde
3 (es el punto) Se pierde
12 (es el punto) Se pierde
8 (es el punto), 9, 6, 5, 8 Se gana
8 (es el punto), 9, 6, 5, 7 Se pierde


Diseñar e implementar una aplicación utilizando la metodología de diseño descendente (top-down)
y el paradigma de la programación estructurada y modular que permita:
1. Jugar una partida:
el usuario tira los dados apretando la tecla espacio y la aplicación va informando del resultado y de los siguientes pasos.

2. Determinar la equidad del juego:
la aplicación juega automáticamente el número de partidas que le entra el usuario por teclado,
contando el número de partidas ganadas y perdidas y calculando la probabilidad de ganar en %.
La única diferencia con la partida interactiva (opción anterior) es que el usuario no debe apretar el espacio para lanzar los dados,
el resto de mensajes por pantalla son los mismos.

3. Obtener ayuda online.
4. Salir de la aplicación.


5) Nos han pedido que hagamos una gestión muy simple de reservas de un cine. El programa debe cumplir los siguientes requisitos:

Se debe iniciar con un número total de entradas libres.
Debe ir preguntando el número de entradas que queremos reservar. En cada reserva debe comprobar si existen suficientes localidades libres.
En caso afirmativo, debe calcular el precio total de la reserva a razón de 6 euros la entrada.
El programa debe terminar cuando le pedimos un número de entradas que sobrepasa el aforo disponible.
Cuando esto ocurra se debe mostrar el número total de entradas vendidas por aquella sesión y la recaudación total que se ha realizado.


6) Dada una frase donde aparecen una lista de palabras di con qué frecuencia aparece una palabra X. Por ejemplo:
  "cinco bolas sirven por cinco juegos y por cinco niños" la palabra "cinco" aparece con una frecuencia de 3/10.


7) Deberemos hacer la gestión de una lavadora.
Tenemos dos cubos, uno para ropa blanca y otro para ropa de otros colores.
Debemos diseñar un programa modular en el que vamos introduciendo la ropa y especificamos el peso y el color.
Si es de color blanco lo depositamos en el cubo blanco y sino en el de color.
Cuando uno de los dos cubos traspasa los 2 kg de peso debe enviarse a lavar,
es entonces cuando termina el programa y debe anunciarnos cuál de los dos cubos ha lavado y con qué peso.
